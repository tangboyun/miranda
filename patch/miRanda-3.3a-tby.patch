diff -uNr src/miranda.c pathed/miranda.c
--- src/miranda.c	2010-08-26 01:47:16.000000000 +0800
+++ pathed/miranda.c	2013-03-14 14:16:02.000000000 +0800
@@ -63,7 +63,7 @@
 	char filename2[200];
 	char pairs_file[200];
 	char fileout[200];
-	FILE* query_fp = 0;
+    /*	FILE* query_fp = 0; */
 	FILE* reference_fp = 0;
 	FILE* fp_pairs = 0;
 	FILE* fpout = stdout;
@@ -93,10 +93,10 @@
 		fprintf(stderr, "Error: negative value give for UTR truncation\n");
 		return 1;
 	}
-	if ((query_fp = fopen(filename1, "r")) == NULL) {
-		fprintf(stderr, "Error: Cannot open file %s\n", filename1);
-		return 1;
-	}
+	/* if ((query_fp = fopen(filename1, "r")) == NULL) { */
+	/* 	fprintf(stderr, "Error: Cannot open file %s\n", filename1); */
+	/* 	return 1; */
+	/* } */
 	if ((reference_fp = fopen(filename2, "r")) == NULL) {
 		fprintf(stderr, "Error: Cannot open file %s\n", filename2);
 		return 1;
@@ -120,9 +120,9 @@
 	if (restricted && verbosity) {
 		printf("Performing Restricted Scan on:%d pairs\n", total_pairs);
 	}
-	find_targets(query_fp, fpout, pairs, total_pairs, filename2);
+	find_targets(filename1, fpout, pairs, total_pairs, filename2);
 	destroy_globals();
 	if (outfile) fclose(fpout);
-	fclose(query_fp);
+	/* fclose(query_fp); */
 	return 0;
 }
diff -uNr src/miranda.h pathed/miranda.h
--- src/miranda.h	2010-08-26 01:47:19.000000000 +0800
+++ pathed/miranda.h	2013-03-14 14:02:17.000000000 +0800
@@ -101,7 +101,7 @@
 
 /* Functions Declarations */
 /*   in scan.c */
-int find_targets(FILE*, FILE*, pair_struct*, int, char*);
+int find_targets(char*, FILE*, pair_struct*, int, char*);
 /*   in swat.c */
 void traceback(int**, int***, char*, char*, int, int, hit_struct*, double);
 int testfor_overlap(int*, int*, int*, int, int);
diff -uNr src/scan.c pathed/scan.c
--- src/scan.c	2010-08-26 01:47:30.000000000 +0800
+++ pathed/scan.c	2013-03-14 14:22:02.000000000 +0800
@@ -225,8 +225,9 @@
 }
 
 /* Load Sequences and Set-up the Alignment Run*/
-int find_targets(FILE* query_fp, FILE* fpout, pair_struct* pairs, int total_pairs, char* filename) {
+int find_targets(char* filename1, FILE* fpout, pair_struct* pairs, int total_pairs, char* filename) {
 	FILE* reference_fp = 0;
+    FILE* query_fp = 0;
 	int** best;			/* Best score of all three states (nt-nt, nt-gap, gap-nt*/
 	int*** track;			/* Traceback Matrix		*/
 	int** a_nt_nt;			/* best score for state nt-nt*/
@@ -250,26 +251,30 @@
 	char* reference_id = malloc(INITIAL_STRING_SIZE * sizeof(char));
 	hit_summary.position_list = 0;
 	create_ExpString(&(hit_summary.position_list));
-	/* Read the query sequence(s) (microRNA(s)) from a FASTA file*/
-	while (readinseq(query_fp, &query_sequence, &query_description, &query_id, &query_length)) {
+
+    /* Loop over all reference sequences in FASTA file*/
+    /* Do full scan for each						*/
+    if ((reference_fp = fopen(filename, "r")) == NULL) {
+      fprintf(stderr, "Error: Cannot open file %s\n", filename);
+      exit(1);
+    }
+    while (readinseq(reference_fp, &reference_sequence, &reference_description, &reference_id, &reference_length)) {
+      if ((query_fp = fopen(filename1, "r")) == NULL) {
+        fprintf(stderr, "Error: Cannot open file %s\n", filename1);
+        return 1;
+      }
+
+      /* Read the query sequence(s) (microRNA(s)) from a FASTA file*/
+      while (readinseq(query_fp, &query_sequence, &query_description, &query_id, &query_length)) {
 		if (verbosity || debug) {
-			fprintf(fpout, "Read Sequence:%s %s(%d nt)\n", query_id, query_description, query_length);
+          fprintf(fpout, "Read Sequence:%s %s(%d nt)\n", query_id, query_description, query_length);
 		}
 		/* Reverse the query (microRNA) sequence for aligning*/
 		revstring(query_sequence);
-		/* Loop over all reference sequences in FASTA file*/
-		/* Do full scan for each						*/
-		if ((reference_fp = fopen(filename, "r")) == NULL) {
-			fprintf(stderr, "Error: Cannot open file %s\n", filename);
-			exit(1);
-		}
-		while (readinseq(reference_fp, &reference_sequence, &reference_description, &reference_id, &reference_length)) {
-			if (restricted && !find_pair(query_id, reference_id, total_pairs, pairs)) {
-				/* printf("Skipped: %s vs %s (length %d)\n", query_id, reference_id, reference_length);*/
-				continue;
-			}
-			/* Keep track of the number of sequences scanned so far*/
-			utr_processed++;
+        if (restricted && !find_pair(query_id, reference_id, total_pairs, pairs)) {
+          /* printf("Skipped: %s vs %s (length %d)\n", query_id, reference_id, reference_length);*/
+          continue;
+        }
 			if (verbosity || debug) {
 				fprintf(fpout, "Read Sequence:%s %s(%d nt)\n", reference_id,
 						reference_description, reference_length);
@@ -392,10 +397,13 @@
 			free(hit.alignment[2]);
 			free(hit.alignment[1]);
 			free(hit.alignment[0]);
+            mirna_processed++;
 		}
-		fclose(reference_fp);
-		mirna_processed++;
+        /* Keep track of the number of sequences scanned so far*/
+        utr_processed++;
+        fclose(query_fp);
 	}
+    fclose(reference_fp);
 	fprintf(fpout, "Scan Complete\n\n");
 	destroy_ExpString(&(hit_summary.position_list));
 	fflush(fpout);
